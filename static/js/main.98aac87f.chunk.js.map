{"version":3,"sources":["Profile.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","handleChild","useAccount","address","connector","isConnected","ensName","useEnsAvatar","addressOrName","data","useEnsName","useConnect","connect","connectors","error","isLoading","pendingConnector","disconnect","useDisconnect","useEffect","console","log","name","onClick","map","className","disabled","ready","id","message","alchemyId","process","ALCHEMY_ID","configureChains","defaultChains","alchemyProvider","publicProvider","chains","provider","webSocketProvider","client","createClient","autoConnect","MetaMaskConnector","CoinbaseWalletConnector","options","appName","WalletConnectConnector","qrcode","InjectedConnector","shimDisconnect","App","userInteraction","useState","isWalletConnected","setIsWalletConnected","userName","setUserName","displayedUserName","setDisplayedUserName","setError","contractABI","abi","checkIfWalletIsConnected","window","ethereum","request","method","accounts","account","status","handleClick","e","preventDefault","ethers","providers","Web3Provider","signer","getSigner","waveContract","Contract","setName","utils","formatBytes32String","txn","wait","hash","onChange","target","value","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.98aac87f.chunk.js","sourcesContent":["import { React, useEffect } from \"react\";\nimport {\n  useAccount,\n  useConnect,\n  useDisconnect,\n  useEnsAvatar,\n  useEnsName,\n} from \"wagmi\";\nimport \"./style/profile.css\";\n\nconst Profile = ({ handleChild }) => {\n  const { address, connector, isConnected } = useAccount();\n  const { data: ensAvatar } = useEnsAvatar({ addressOrName: address });\n  const { data: ensName } = useEnsName({ address });\n  const { connect, connectors, error, isLoading, pendingConnector } =\n    useConnect();\n  const { disconnect } = useDisconnect();\n\n  useEffect(() => {\n    console.log(isConnected);\n    // disconnect();\n\n    if (isConnected === true) {\n      handleChild(true);\n    }\n  });\n  //send some data to parent so that if isConnected is false,\n  //then make the connect button useless\n  //also, can you disconnect the user once they close the page?\n  //like, can you fire a function on page close?\n\n  if (isConnected) {\n    return (\n      <div>\n        {/* <img src={ensAvatar} alt=\"ENS Avatar\" /> */}\n        <div>{ensName ? `${ensName} (${address})` : address}</div>\n        <div>Connected to {connector.name}</div>\n        <button onClick={disconnect}>Disconnect</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {connectors.map((connector) => (\n        <button\n          className=\"btn\"\n          disabled={!connector.ready}\n          key={connector.id}\n          onClick={() => connect({ connector })}\n        >\n          {connector.name}\n          {!connector.ready && \" (unsupported)\"}\n          {isLoading &&\n            connector.id === pendingConnector?.id &&\n            \" (connecting)\"}\n        </button>\n      ))}\n\n      {error && <div>{error.message}</div>}\n    </div>\n  );\n};\n\nexport default Profile;\n","import { useState, useEffect } from \"react\";\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/Wave.json\";\nimport Profile from \"./Profile\";\nimport \"./App.css\";\nimport {\n  WagmiConfig,\n  createClient,\n  defaultChains,\n  configureChains,\n} from \"wagmi\";\n\nimport { alchemyProvider } from \"wagmi/providers/alchemy\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n\nconst alchemyId = process.env.ALCHEMY_ID;\n\n// Configure chains & providers with the Alchemy provider.\n// Two popular providers are Alchemy (alchemy.com) and Infura (infura.io)\nconst { chains, provider, webSocketProvider } = configureChains(defaultChains, [\n  alchemyProvider({ alchemyId }),\n  publicProvider(),\n]);\n\n// Set up client\nconst client = createClient({\n  autoConnect: true,\n  connectors: [\n    new MetaMaskConnector({ chains }),\n    new CoinbaseWalletConnector({\n      chains,\n      options: {\n        appName: \"wagmi\",\n      },\n    }),\n    new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: true,\n      },\n    }),\n    new InjectedConnector({\n      chains,\n      options: {\n        name: \"Injected\",\n        shimDisconnect: true,\n      },\n    }),\n  ],\n  provider,\n  webSocketProvider,\n});\n\nconst App = () => {\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [displayedUserName, setDisplayedUserName] = useState(\"initial name\");\n  const [error, setError] = useState(null);\n  const contractAddress = \"0xd3119cF15a2C983e6fA744dEfeD9c6051A8B7Fd7\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Please install a wallet to use our bank.\");\n        console.log(\"No wallet detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleInput = (name) => {\n    // setUserName(name);\n    // console.log(name.target.value);\n    setUserName(name.target.value);\n  };\n\n  const handleChild = (status) => {\n    console.log(status);\n    console.log(\"clicked in parent\");\n    setIsWalletConnected(true);\n  };\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const waveContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      const txn = await waveContract.setName(\n        utils.formatBytes32String(userName)\n      );\n      console.log(\"setting user name\");\n      await txn.wait();\n      console.log(\"user name set\", txn.hash);\n      setDisplayedUserName(userName);\n      handleChild();\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  let userInteraction;\n  if (isWalletConnected === true) {\n    userInteraction = (\n      <div>\n        <input onChange={handleInput} type=\"text\" />\n        <button onClick={handleClick}>Wave</button>\n        <p> {displayedUserName} waved!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Wagmi Project</h1>\n\n      {/* <div>\n        <input onChange={handleInput} type=\"text\" />\n        <button onClick={handleClick}>Wave</button>\n      <p> {displayedUserName} waved!</p>\n      </div> */}\n      {userInteraction}\n      <WagmiConfig client={client}>\n        <Profile handleChild={handleChild} />\n      </WagmiConfig>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}